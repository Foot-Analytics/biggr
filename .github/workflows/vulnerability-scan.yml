name: Vulnerability Scan

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * 0'  # Run weekly on Sundays at midnight

jobs:
  scan:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
    steps:
      - uses: actions/checkout@v3

      - name: Set up R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: '4.1.2'

      - name: Install dependencies
        run: |
          install.packages(c("remotes"))
          remotes::install_deps(dependencies = TRUE)
          install.packages("oysteR")
        shell: Rscript {0}

      - name: Run vulnerability scan
        id: vulnerability_scan
        run: |
          # Create a directory for scan results
          mkdir -p scan_results

          # Run vulnerability scan using oysteR
          Rscript -e '
            library(oysteR)
            # Get all dependencies from the DESCRIPTION file
            pkg_deps <- read.dcf("DESCRIPTION", fields = c("Depends", "Imports", "Suggests", "LinkingTo"))
            pkg_deps <- unlist(strsplit(paste(pkg_deps, collapse = ","), ",|\\n"))
            pkg_deps <- gsub("\\s+", "", pkg_deps)
            pkg_deps <- pkg_deps[pkg_deps != "R(>=4.1.2)" & pkg_deps != ""]
            pkg_deps <- gsub("\\(.*\\)", "", pkg_deps)

            # Scan dependencies for vulnerabilities
            vuln <- audit_packages(packages = pkg_deps)

            # Save full results
            saveRDS(vuln, "scan_results/full_scan_results.rds")

            # Extract critical vulnerabilities
            critical_vulns <- vuln[vuln$severity == "CRITICAL", ]
            saveRDS(critical_vulns, "scan_results/critical_vulnerabilities.rds")

            # Create a summary file
            sink("scan_results/summary.txt")
            cat("Vulnerability Scan Summary\n")
            cat("==========================\n\n")
            cat("Total packages scanned:", length(pkg_deps), "\n")
            cat("Total vulnerabilities found:", nrow(vuln), "\n")
            cat("Critical vulnerabilities:", nrow(critical_vulns), "\n\n")

            if (nrow(critical_vulns) > 0) {
              cat("CRITICAL VULNERABILITIES DETECTED!\n\n")
              for (i in 1:nrow(critical_vulns)) {
                cat("Package:", critical_vulns$package[i], "\n")
                cat("Vulnerability:", critical_vulns$vulnerability_id[i], "\n")
                cat("Details:", critical_vulns$details[i], "\n\n")
              }
              # Signal to GitHub Actions that critical vulnerabilities were found
              cat("::set-output name=critical_found::true\n")
              cat("::set-output name=critical_count::", nrow(critical_vulns), "\n")
            } else {
              cat("No critical vulnerabilities found.\n")
              cat("::set-output name=critical_found::false\n")
              cat("::set-output name=critical_count::0\n")
            }
            sink()
          '

          # Display summary in the workflow log
          cat scan_results/summary.txt

      - name: Upload scan results
        uses: actions/upload-artifact@v4
        with:
          name: vulnerability-scan-results
          path: scan_results/
          retention-days: 5

      - name: Create GitHub issue for critical vulnerabilities
        if: steps.vulnerability_scan.outputs.critical_found == 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('scan_results/summary.txt', 'utf8');

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `ðŸš¨ Critical Vulnerabilities Detected: ${process.env.CRITICAL_COUNT} issues found`,
              body: `## Vulnerability Scan Results\n\n${summary}\n\nPlease address these critical security vulnerabilities as soon as possible.`,
              labels: ['security', 'vulnerability', 'critical']
            });
        env:
          CRITICAL_COUNT: ${{ steps.vulnerability_scan.outputs.critical_count }}
